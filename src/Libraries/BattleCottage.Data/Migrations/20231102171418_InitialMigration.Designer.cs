// <auto-generated />
using System;
using BattleCottage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BattleCottage.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231102171418_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BattleCottage.Core.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.GameMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameModes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4457),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4458),
                            Name = "PvP"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4459),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4459),
                            Name = "PvE"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4460),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4460),
                            Name = "Co-op"
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4461),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4462),
                            Name = "Multiplayer"
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4462),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4463),
                            Name = "Battle Royale"
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4464),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4464),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.GameRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4625),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4625),
                            Name = "Tank"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4627),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4627),
                            Name = "Healer"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4628),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4629),
                            Name = "DPS"
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4630),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4630),
                            Name = "Top Lane"
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4631),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4631),
                            Name = "Bottom Lane"
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4632),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4633),
                            Name = "Mid Lane"
                        },
                        new
                        {
                            Id = 7,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4634),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4634),
                            Name = "Jungle"
                        },
                        new
                        {
                            Id = 8,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4635),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4635),
                            Name = "Support"
                        },
                        new
                        {
                            Id = 9,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4636),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4637),
                            Name = "Entry Fragger"
                        },
                        new
                        {
                            Id = 10,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4638),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4638),
                            Name = "ReFragger"
                        },
                        new
                        {
                            Id = 11,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4639),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4639),
                            Name = "Strategy Caller"
                        },
                        new
                        {
                            Id = 12,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4640),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4641),
                            Name = "Lurker"
                        },
                        new
                        {
                            Id = 13,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4641),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4642),
                            Name = "Awper"
                        },
                        new
                        {
                            Id = 14,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4643),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4643),
                            Name = "Combat Support"
                        },
                        new
                        {
                            Id = 15,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4644),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4644),
                            Name = "Medic"
                        },
                        new
                        {
                            Id = 16,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4645),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4646),
                            Name = "Assault"
                        },
                        new
                        {
                            Id = 17,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4647),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4647),
                            Name = "Recon"
                        },
                        new
                        {
                            Id = 18,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4648),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4648),
                            Name = "Friendly"
                        },
                        new
                        {
                            Id = 19,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4649),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4650),
                            Name = "Funny"
                        },
                        new
                        {
                            Id = 20,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4650),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4651),
                            Name = "Serious"
                        },
                        new
                        {
                            Id = 21,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4652),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4652),
                            Name = "e-Girl"
                        },
                        new
                        {
                            Id = 22,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4653),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4653),
                            Name = "Silent"
                        },
                        new
                        {
                            Id = 23,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4654),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4655),
                            Name = "Carry"
                        });
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.GameStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameStyles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4610),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4611),
                            Name = "Casual"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4612),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4612),
                            Name = "Competitive"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4613),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4613),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.LFGPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationInMinutesId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("GameModeId")
                        .HasColumnType("integer");

                    b.Property<int>("GameStyleId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DurationInMinutesId");

                    b.HasIndex("GameId");

                    b.HasIndex("GameModeId");

                    b.HasIndex("GameStyleId");

                    b.HasIndex("UserId");

                    b.ToTable("LFGPosts");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.LFGPostDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DurationInMinutes")
                        .IsUnique();

                    b.ToTable("LFGPostDurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4674),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4675),
                            DurationInMinutes = 60,
                            Name = "1 hour"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4676),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4676),
                            DurationInMinutes = 120,
                            Name = "2 hour"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4677),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4677),
                            DurationInMinutes = 300,
                            Name = "5 hour"
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4678),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4679),
                            DurationInMinutes = 720,
                            Name = "12 hour"
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4680),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4680),
                            DurationInMinutes = 1440,
                            Name = "1 day"
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4681),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4681),
                            DurationInMinutes = 4320,
                            Name = "3 days"
                        },
                        new
                        {
                            Id = 7,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4682),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4683),
                            DurationInMinutes = 10080,
                            Name = "7 days"
                        },
                        new
                        {
                            Id = 8,
                            DateAdded = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4683),
                            DateUpdated = new DateTime(2023, 11, 2, 17, 14, 17, 975, DateTimeKind.Utc).AddTicks(4684),
                            DurationInMinutes = 43200,
                            Name = "30 days"
                        });
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.LFGPostGameRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("LFGPostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameRoleId");

                    b.HasIndex("LFGPostId");

                    b.ToTable("LFGPostGameRoles");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.LFGPost", b =>
                {
                    b.HasOne("BattleCottage.Core.Entities.LFGPostDuration", "DurationInMinutes")
                        .WithMany("LFGPosts")
                        .HasForeignKey("DurationInMinutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleCottage.Core.Entities.Game", "Game")
                        .WithMany("LFGPosts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleCottage.Core.Entities.GameMode", "GameMode")
                        .WithMany("LFGPosts")
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleCottage.Core.Entities.GameStyle", "GameStyle")
                        .WithMany("LFGPosts")
                        .HasForeignKey("GameStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleCottage.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DurationInMinutes");

                    b.Navigation("Game");

                    b.Navigation("GameMode");

                    b.Navigation("GameStyle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.LFGPostGameRole", b =>
                {
                    b.HasOne("BattleCottage.Core.Entities.GameRole", "GameRole")
                        .WithMany("LFGPostGameRoles")
                        .HasForeignKey("GameRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleCottage.Core.Entities.LFGPost", "LFGPost")
                        .WithMany("LFGPostGameRoles")
                        .HasForeignKey("LFGPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameRole");

                    b.Navigation("LFGPost");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BattleCottage.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BattleCottage.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleCottage.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BattleCottage.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.Game", b =>
                {
                    b.Navigation("LFGPosts");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.GameMode", b =>
                {
                    b.Navigation("LFGPosts");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.GameRole", b =>
                {
                    b.Navigation("LFGPostGameRoles");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.GameStyle", b =>
                {
                    b.Navigation("LFGPosts");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.LFGPost", b =>
                {
                    b.Navigation("LFGPostGameRoles");
                });

            modelBuilder.Entity("BattleCottage.Core.Entities.LFGPostDuration", b =>
                {
                    b.Navigation("LFGPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
